# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: devops

variables: 
  - name: DEV_ENVIRONMENT
    value: dev
  - name: QA_ENVIRONMENT
    value: qa

stages:
  - stage: terraformvalidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/01-terraform-mainfests-aks'
              artifact: 'terraform-manifests-out'
              publishLocation: 'pipeline'
          
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@2
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/01-terraform-mainfests-aks'
              backendType: 'azurerm'
              backendServiceArm: 'terraform-azure-aks-svc-conn'
              backendAzureRmResourceGroupName: 'terraform-storage-rg1'
              backendAzureRmStorageAccountName: 'terraformdevon1006'
              backendAzureRmContainerName: 'terraform'
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: false'
          
          - task: TerraformCLI@2
            inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/01-terraform-mainfests-aks'
              allowTelemetryCollection: false

  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: DeployDevAKSCluster
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
           deploy:
             steps:
              - task: DownloadSecureFile@1
                name: sshkey
                inputs:
                  secureFile: 'aksprodsshkey.pub'
          
              - task: TerraformCLI@2
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-azure-aks-svc-conn'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg1'
                  backendAzureRmStorageAccountName: 'terraformdevon1006'
                  backendAzureRmContainerName: 'terraform'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                  allowTelemetryCollection: false
              

              - task: TerraformCLI@2
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-azure-aks-svc-conn'
                  providerAzureRmSubscriptionId: 'eaf0870e-e442-41db-84e9-e4a3ee49c62d'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              
              - task: TerraformCLI@2
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-azure-aks-svc-conn'
                  providerAzureRmSubscriptionId: 'eaf0870e-e442-41db-84e9-e4a3ee49c62d'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
            
  - stage: DeployQAAKSClusters 
    dependsOn: DeployAKSClusters
    jobs:
      - deployment: DeployQAAKSCluster
        displayName: DeployQAAKSCluster
        environment: $(QA_ENVIRONMENT)
        strategy:
          runOnce:
           deploy:
             steps:
              - task: DownloadSecureFile@1
                name: sshkey
                inputs:
                  secureFile: 'aksprodsshkey.pub'
          
              - task: TerraformCLI@2
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-azure-aks-svc-conn'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg1'
                  backendAzureRmStorageAccountName: 'terraformdevon1006'
                  backendAzureRmContainerName: 'terraform'
                  backendAzureRmKey: 'aks-$(QA_ENVIRONMENT).tfstate'
                  allowTelemetryCollection: false
              

              - task: TerraformCLI@2
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-azure-aks-svc-conn'
                  providerAzureRmSubscriptionId: 'eaf0870e-e442-41db-84e9-e4a3ee49c62d'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(QA_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              
              - task: TerraformCLI@2
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-azure-aks-svc-conn'
                  providerAzureRmSubscriptionId: 'eaf0870e-e442-41db-84e9-e4a3ee49c62d'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                  allowTelemetryCollection: false